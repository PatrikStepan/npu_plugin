//
// Copyright (C) 2023 Intel Corporation.
// SPDX-License-Identifier: Apache 2.0
//

namespace ProfilingFB;

// Each task represent individual task, which can be executed and so be profiled.
// DMATask - DMA transaction, DPUTask - DPU invariant, SWTask - UPA task or single kernel invokation
// Some fields are common, like name(consist of original layer name, which come from IR location) 
// and wait/update barriers, which represent dependencies. Other fields specific to engine

table DMATask {
    name: string;
    sourceLocale: string;   // Stringified locale of source argument(may be CMX, DDR, Register)
    waitBarriers: [uint];
    updateBarriers: [uint];
    hwpId: ushort;          // DMA hardware profiling ID
}

// DPU tasks are special, because of memory layout, which may be distributed across multiple clusters.
// Each DPU invariant may consist of variable number of variants(numVariants field), which can be different from
// other invariants of the same task(before unrolling). Profiling buffer is allocated before the task is split into invariants,
// and memory distribution is assumed to be the same for all clusters, so knowledge of maxVariants is needed to skip empty regions for cluster,
// which don't use all allocated memory. bufferId and taskId is needed to know order of tasks and for debugging purpose

table DPUTask {
    name: string;
    bufferId: ushort;       // id of buffer(single DPU profiling buffer in CMX)
    clusterId: ushort;      // id of cluster
    taskId: ushort;         // id of task(global, not in current buffer)
    numVariants: ushort;    // count of variants(or count of **used** profiling timestamps)
    maxVariants: ushort;    // max. count of variants in any invariant, which was grouped before unrolling(or size of **allocated** memory for profiling timestamps)
    waitBarriers: [uint];
    updateBarriers: [uint];
    workloadIds: [uint];    // DPU hardware profiling ID, for validation purpose. Quantity should be the same as numVariants
}

table SWTask {
    name: string;
    waitBarriers: [uint];
    updateBarriers: [uint];
    taskType: string;       // name of the kernel or layer type
}

table ProfilingSection {
    type: uint;
    offset: uint;
    size: uint;
}

table ProfilingBuffer {
    sections: [ProfilingSection];
    size: uint;
}

// High level container over others
table ProfilingMeta {
    profilingBuffer: ProfilingBuffer;
    dmaTasks: [DMATask];
    dpuTasks: [DPUTask];
    swTasks: [SWTask];
}

root_type ProfilingMeta;
