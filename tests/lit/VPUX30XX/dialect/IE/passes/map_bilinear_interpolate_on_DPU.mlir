//
// Copyright (C) 2022-2023 Intel Corporation.
// SPDX-License-Identifier: Apache 2.0
//

// RUN: vpux-opt --split-input-file --mlir-print-elementsattrs-with-hex-if-larger 8192 --init-compiler="vpu-arch=VPUX30XX compilation-mode=DefaultHW" --map-bilinear-interpolate-on-dpu %s | FileCheck %s

// CHECK-LABEL: @MapBilinearPytorchHalfPixelInterpolateOnDPU
func.func @MapBilinearPytorchHalfPixelInterpolateOnDPU(%arg0: tensor<1x128x72x72xf16>) -> tensor<1x128x140x140xf16> {
    %0 = IE.Interpolate(%arg0) {attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <PYTORCH_HALF_PIXEL>, nearest_mode = <FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operand_segment_sizes = dense<[1, 0, 0, 0]> : vector<4xi32>,
        scales_attr = [1.0000100135803223, 1.0000100135803223, 1.9444544315338135, 1.9444544315338135], sizes_attr = [1, 128, 140, 140]
    } : tensor<1x128x72x72xf16> -> tensor<1x128x140x140xf16>

    return %0 : tensor<1x128x140x140xf16>

    // CHECK-NOT:   IE.Interpolate
    // Vertical scale
    // CHECK:       [[VSLICE0:%.*]] = IE.Slice %arg0 [0, 0, 0, 0] [1, 128, 1, 72] : tensor<1x128x72x72xf16> to tensor<1x128x1x72xf16>
    // CHECK:       [[VMAXPOOL0:%.*]] = IE.MaxPool([[VSLICE0]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x128x1x72xf16> -> tensor<1x128x1x72xf16>
    // CHECK:       [[VSLICE1:%.*]] = IE.Slice %arg0 [0, 0, 0, 0] [1, 128, 2, 72] : tensor<1x128x72x72xf16> to tensor<1x128x2x72xf16>
    // CHECK-DAG:   [[VCST:%.*]] = const.Declare tensor<128x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:     dense<[[[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]], [[[7.285150e-01], [2.714840e-01]]]]> : tensor<128x1x2x1xf16>
    // CHECK:       [[VGROUP_CONV:%.*]] = IE.GroupConvolution([[VSLICE1]], [[VCST]]) {dilations = [1, 1], groups = 128 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x128x2x72xf16>, tensor<128x1x2x1xf16> -> tensor<1x128x1x72xf16>
    // CHECK-DAG:   [[VCST1:%.*]] = const.Declare tensor<128x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:     dense<[[[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]], [[[2.142330e-01], [7.856440e-01]]]]> : tensor<128x1x2x1xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[VSLICELAST:%.*]] = IE.Slice %arg0 [0, 0, 71, 0] [1, 128, 1, 72] : tensor<1x128x72x72xf16> to tensor<1x128x1x72xf16>
    // CHECK:       [[VMAXPOOL1:%.*]] = IE.MaxPool([[VSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x128x1x72xf16> -> tensor<1x128x1x72xf16>
    // CHECK:       [[VERTICALCONCAT:%.*]] = IE.Concat

    // Horizontal scale
    // CHECK:       [[HSLICE0:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 0] [1, 128, 140, 1] : tensor<1x128x140x72xf16> to tensor<1x128x140x1xf16>
    // CHECK:       [[HMAXPOOL0:%.*]] = IE.MaxPool([[HSLICE0]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x128x140x1xf16> -> tensor<1x128x140x1xf16>
    // CHECK:       [[HSLICE1:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 0] [1, 128, 140, 2] : tensor<1x128x140x72xf16> to tensor<1x128x140x2xf16>
    // CHECK-DAG:   [[HCST:%.*]] = const.Declare tensor<128x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:   dense<[[[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]], [[[7.285150e-01, 2.714840e-01]]]]> : tensor<128x1x1x2xf16>
    // CHECK:       [[HGROUP_CONV:%.*]] = IE.GroupConvolution([[HSLICE1]], [[HCST]]) {dilations = [1, 1], groups = 128 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x128x140x2xf16>, tensor<128x1x1x2xf16> -> tensor<1x128x140x1xf16>
    // CHECK-DAG:   [[HCST1:%.*]] = const.Declare tensor<128x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:   dense<[[[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]], [[[2.142330e-01, 7.856440e-01]]]]> : tensor<128x1x1x2xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[HSLICELAST:%.*]]= IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 71] [1, 128, 140, 1] : tensor<1x128x140x72xf16> to tensor<1x128x140x1xf16>
    // CHECK:       [[HMAXPOOL1:%.*]]  = IE.MaxPool([[HSLICELAST:%.*]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x128x140x1xf16> -> tensor<1x128x140x1xf16>
    // CHECK:       [[HORIZONTALCONCAT:%.*]] = IE.Concat

    // CHECK: return [[HORIZONTALCONCAT]] : tensor<1x128x140x140xf16>
}

// -----

// CHECK-LABEL: @MapBilinearAsymmetricInterpolateOnDPU
func.func @MapBilinearAsymmetricInterpolateOnDPU(%arg0: tensor<1x21x65x65xf16>) -> tensor<1x21x513x513xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SCALES>, coord_mode = <ASYMMETRIC>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operand_segment_sizes = dense<[1, 0, 0, 0]> : vector<4xi32>,
        scales_attr = [1.000000e+00, 1.000000e+00, 7.8923077583312988, 7.8923077583312988],
        sizes_attr = [1, 21, 513, 513]
    } : tensor<1x21x65x65xf16> -> tensor<1x21x513x513xf16>

    return %0 : tensor<1x21x513x513xf16>

    // CHECK-NOT:   IE.Interpolate
    // Vertical scale
    // CHECK:       [[EXPAND:%.*]] = IE.Expand(%arg0) {pads_begin = [0, 0, 0, 0], pads_end = [0, 11, 0, 0]} : tensor<1x21x65x65xf16> -> tensor<1x32x65x65xf16>
    // CHECK:       [[VSLICE0:%.*]] = IE.Slice [[EXPAND]] [0, 0, 0, 0] [1, 32, 2, 65] : tensor<1x32x65x65xf16> to tensor<1x32x2x65xf16>
    // CHECK-DAG:   [[VCST0:%.*]] = const.Declare tensor<32x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]]]> : tensor<32x1x2x1xf16>
    // CHECK:       [[VGROUP_CONV0:%.*]] = IE.GroupConvolution([[VSLICE0]], [[VCST0]]) {dilations = [1, 1], groups = 32 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x32x2x65xf16>, tensor<32x1x2x1xf16> -> tensor<1x32x1x65xf16>
    // CHECK-DAG:   [[VCST1:%.*]] = const.Declare tensor<32x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]], [[[8.735350e-01], [1.267090e-01]]]]> : tensor<32x1x2x1xf16>

    // A lot of other Slice -> Const -> GroupConvolution

    // CHECK:       [[VSLICELAST:%.*]] = IE.Slice [[EXPAND:%.*]] [0, 0, 64, 0] [1, 32, 1, 65] : tensor<1x32x65x65xf16> to tensor<1x32x1x65xf16>
    // CHECK:       [[VMAXPOOL0:%.*]] = IE.MaxPool([[VSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x1x65xf16> -> tensor<1x32x1x65xf16>
    // CHECK:       [[VMAXPOOL1:%.*]] = IE.MaxPool([[VSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x1x65xf16> -> tensor<1x32x1x65xf16>
    // CHECK:       [[VERTICALCONCAT:%.*]] = IE.Concat

    // Horizontal scale
    // CHECK:       [[HSLICE0:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 0] [1, 32, 513, 2] : tensor<1x32x513x65xf16> to tensor<1x32x513x2xf16>
    // CHECK-DAG:   [[HCST0:%.*]] = const.Declare tensor<32x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]]]> : tensor<32x1x1x2xf16>
    // CHECK:       [[HGROUP_CONV0:%.*]] IE.GroupConvolution([[HSLICE0]], [[HCST0]]) {dilations = [1, 1], groups = 32 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x32x513x2xf16>, tensor<32x1x1x2xf16> -> tensor<1x32x513x1xf16>
    // CHECK:       [[HCST1:%.*]] = const.Declare tensor<32x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]], [[[8.735350e-01, 1.267090e-01]]]]> : tensor<32x1x1x2xf16>

    // A lot of other Slice -> Const -> GroupConvolution

    // CHECK:       [[HSLICELAST:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 64] [1, 32, 513, 1] : tensor<1x32x513x65xf16> to tensor<1x32x513x1xf16>
    // CHECK:       [[HMAXPOOL0:%.*]] = IE.MaxPool([[HSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x513x1xf16> -> tensor<1x32x513x1xf16>
    // CHECK:       [[HMAXPOOL1:%.*]] = IE.MaxPool([[HSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x513x1xf16> -> tensor<1x32x513x1xf16>

    // CHECK:       [[HORIZONALCONCAT:%.*]] = IE.Concat
    // CHECK:       [[FINALSLICE:%.*]] = IE.Slice [[HORIZONALCONCAT]] [0, 0, 0, 0] [1, 21, 513, 513] : tensor<1x32x513x513xf16> to tensor<1x21x513x513xf16>

    // CHECK: return [[FINALSLICE]] : tensor<1x21x513x513xf16>
}

// -----

// CHECK-LABEL: @MapBilinearAlignCornersInterpolateOnDPU
func.func @MapBilinearAlignCornersInterpolateOnDPU(%arg0: tensor<1x32x180x320xf16>) -> tensor<1x32x92x120xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0],
        pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [2, 3], operand_segment_sizes = dense<[1, 0, 0, 0]> : vector<4xi32>,
        scales_attr = [0.51111114025115967, 5.000000e-01],
        sizes_attr = [92, 120]} : tensor<1x32x180x320xf16> -> tensor<1x32x92x120xf16>
    return %0 : tensor<1x32x92x120xf16>

    // CHECK-NOT:   IE.Interpolate
    // Vertical scale
    // CHECK:       [[VSLICE0:%.*]] = IE.Slice %arg0 [0, 0, 0, 0] [1, 32, 2, 320] : tensor<1x32x180x320xf16> to tensor<1x32x2x320xf16>
    // CHECK-DAG:   [[VCST0:%.*]] = const.Declare tensor<32x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]], [[[1.000000e+00], [0.000000e+00]]]]> : tensor<32x1x2x1xf16>
    // CHECK:       [[VGROUP_CONV0:%.*]] = IE.GroupConvolution([[VSLICE0]], [[VCST0]]) {dilations = [1, 1], groups = 32 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x32x2x320xf16>, tensor<32x1x2x1xf16> -> tensor<1x32x1x320xf16>
    // CHECK:       [[VSLICE1:%.*]] = IE.Slice %arg0 [0, 0, 1, 0] [1, 32, 2, 320] : tensor<1x32x180x320xf16> to tensor<1x32x2x320xf16>
    // CHECK-DAG:   [[VCST1:%.*]] = const.Declare tensor<32x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]], [[[3.295900e-02], [9.667960e-01]]]]> : tensor<32x1x2x1xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[VSLICELAST:%.*]] = IE.Slice %arg0 [0, 0, 179, 0] [1, 32, 1, 320] : tensor<1x32x180x320xf16> to tensor<1x32x1x320xf16>
    // CHECK:       [[VMAXPOOL:%.*]] = IE.MaxPool([[VSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x1x320xf16> -> tensor<1x32x1x320xf16>
    // CHECK:       [[VERTICALCONCAT:%.*]] = IE.Concat

    // Vertical scale
    // CHECK:       [[HSLICE0:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 0] [1, 32, 92, 2] : tensor<1x32x92x320xf16> to tensor<1x32x92x2xf16>
    // CHECK-DAG:   [[HCST0:%.*]] = const.Declare tensor<32x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]], [[[1.000000e+00, 0.000000e+00]]]]> : tensor<32x1x1x2xf16>
    // CHECK:       [[HGROUP_CONV0:%.*]] = IE.GroupConvolution([[HSLICE0]], [[HCST0]]) {dilations = [1, 1], groups = 32 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x32x92x2xf16>, tensor<32x1x1x2xf16> -> tensor<1x32x92x1xf16>
    // CHECK:       [[HSLICE1:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 2] [1, 32, 92, 2] : tensor<1x32x92x320xf16> to tensor<1x32x92x2xf16>
    // CHECK-DAG:   [[HCST1:%.*]] = const.Declare tensor<32x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]], [[[3.193360e-01, 6.806640e-01]]]]> : tensor<32x1x1x2xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[HSLICELAST:%.*]] = IE.Slice [[VERTICALCONCAT]] [0, 0, 0, 319] [1, 32, 92, 1] : tensor<1x32x92x320xf16> to tensor<1x32x92x1xf16>
    // CHECK:       [[HMAXPOOL:%.*]] IE.MaxPool([[HSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x32x92x1xf16> -> tensor<1x32x92x1xf16>
    // CHECK:       [[HERTICALCONCAT:%.*]] = IE.Concat

    // CHECK:       return [[HERTICALCONCAT]] : tensor<1x32x92x120xf16>
}

// -----

// CHECK-LABEL: @MapBilinearInterpolateOnDPUHalfPixel
func.func @MapBilinearInterpolateOnDPUHalfPixel(%arg0: tensor<1x256x69x69xf16>) -> tensor<1x256x138x138xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <HALF_PIXEL>, nearest_mode = <FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operand_segment_sizes = dense<[1, 0, 0, 0]> :vector<4xi32>,
        scales_attr = [1.0000100135803223, 1.0000100135803223, 2.0000100135803223, 2.0000100135803223],
        sizes_attr = [1, 256, 138, 138]
    } : tensor<1x256x69x69xf16> -> tensor<1x256x138x138xf16>

    return %0 : tensor<1x256x138x138xf16>

    // CHECK-NOT:   IE.Interpolate
    // Vertical scale
    // CHECK:       [[VSLICE0:%.*]] = IE.Slice %arg0 [0, 0, 0, 0] [1, 256, 1, 69] : tensor<1x256x69x69xf16> to tensor<1x256x1x69xf16>
    // CHECK:       [[VMAXPOOL:%.*]]  = IE.MaxPool([[VSLICE0]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x1x69xf16> -> tensor<1x256x1x69xf16>
    // CHECK:       [[VSLICE1:%.*]] = IE.Slice %arg0 [0, 0, 0, 0] [1, 256, 2, 69] : tensor<1x256x69x69xf16> to tensor<1x256x2x69xf16>
    // CHECK-DAG:   [[VCST0:%.*]] = const.Declare tensor<256x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]]]> : tensor<256x1x2x1xf16>
    // CHECK:       [[VGROUPCONV0:%.*]] = IE.GroupConvolution([[VSLICE1]], [[VCST0]]) {dilations = [1, 1], groups = 256 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x256x2x69xf16>, tensor<256x1x2x1xf16> -> tensor<1x256x1x69xf16>
    // CHECK-DAG:   [[VCST1:%.*]] = const.Declare tensor<256x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]]]> : tensor<256x1x2x1xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[VSLICELAST:%.*]] = IE.Slice %arg0 [0, 0, 68, 0] [1, 256, 1, 69] : tensor<1x256x69x69xf16> to tensor<1x256x1x69xf16>
    // CHECK:       [[VMAXPOOL1:%.*]] = IE.MaxPool([[VSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x1x69xf16> -> tensor<1x256x1x69xf16>
    // CHECK:       [[VCONCAT:%.*]] = IE.Concat

    // Horizontal scale
    // CHECK:       [[HSLICE0:%.*]] = IE.Slice [[VCONCAT]] [0, 0, 0, 0] [1, 256, 138, 1] : tensor<1x256x138x69xf16> to tensor<1x256x138x1xf16>
    // CHECK:       [[HMAXPOOL0:%.*]] = IE.MaxPool([[HSLICE0]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x138x1xf16> -> tensor<1x256x138x1xf16>
    // CHECK:       [[HSLICE1:%.*]] =  IE.Slice [[VCONCAT]] [0, 0, 0, 0] [1, 256, 138, 2] : tensor<1x256x138x69xf16> to tensor<1x256x138x2xf16>
    // CHECK-DAG:   [[HCST0:%.*]] = const.Declare tensor<256x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]]]> : tensor<256x1x1x2xf16>
    // CHECK:       [[HGROUPCONV0:%.*]] = IE.GroupConvolution([[HSLICE1]], [[HCST0]]) {dilations = [1, 1], groups = 256 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x256x138x2xf16>, tensor<256x1x1x2xf16> -> tensor<1x256x138x1xf16>
    // CHECK-DAG:   [[HCST1:%.*]] = const.Declare tensor<256x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]]]> : tensor<256x1x1x2xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[HSLICELAST:%.*]] =  IE.Slice [[VCONCAT]] [0, 0, 0, 68] [1, 256, 138, 1] : tensor<1x256x138x69xf16> to tensor<1x256x138x1xf16>
    // CHECK:       [[HMAXPOOL1:%.*]] = IE.MaxPool([[HSLICELAST]]) {kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x138x1xf16> -> tensor<1x256x138x1xf16>
    // CHECK:       [[HCONCAT:%.*]] = IE.Concat

    // return [[HCONCAT]] : tensor<1x256x138x138xf16>
}

// -----

// CHECK-LABEL: @DoNotMapBilinearInterpolateOnDPUBecauseFitInCMX
func.func @DoNotMapBilinearInterpolateOnDPUBecauseFitInCMX(%arg0: tensor<1x32x45x60xf16>) -> tensor<1x32x23x30xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0],
        pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [2, 3],
        operand_segment_sizes = dense<[1, 0, 0, 0]> : vector<4xi32>,
        scales_attr = [0.51111114025115967, 5.000000e-01],
        sizes_attr = [23, 30]} : tensor<1x32x45x60xf16> -> tensor<1x32x23x30xf16>
    return %0 : tensor<1x32x23x30xf16>

    // CHECK: [[INTERP:%.*]] = IE.Interpolate(%arg0) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0],
    // CHECK-SAME:      pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [2, 3],
    // CHECK-SAME:      operand_segment_sizes = dense<[1, 0, 0, 0]> : vector<4xi32>,
    // CHECK-SAME:      scales_attr = [0.51111114025115967, 5.000000e-01],
    // CHECK-SAME:      sizes_attr = [23, 30]} : tensor<1x32x45x60xf16> -> tensor<1x32x23x30xf16>
    // return [[INTERP]] :  return %0 : tensor<1x32x23x30xf16>
}
